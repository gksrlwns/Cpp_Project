#include <iostream>

using namespace std;

struct Monster
{
private:	// 나만 접근할수있게..
public:	// 모두가 접근할수있게..
	int Hp;
	int Attack;

	void AAA()
	{
		Hp = 3;
	}
};

class CMonster
{
public:
	int Hp;
	int Attack;
};

void main()
{
	// 클래스-1

	// 클래스가 무엇이냐?
	// 클래스는 구조체랑 98% 동일합니다. (최소한 C++에서는)

	// 모른데요.
	// 코드 첫출처가 CTO 님이라서 CTO님한테가서 여쭤봤거든요
	// CTO님이 말씀하시기를 
	// 코드는 계승되거든요. 
	//  A회사에서 퇴사해서 B회사를 창업했다. 
	//  코드를 그대로 가져오기때문에 그 컨벤션을 그대로 유지하면서 가져올때가 많아요.

	// 그 과정에서
	// 과거의과거의과거로 넘어가면
	// 코드가 헝가리안네이밍 컨벤션이 나오는데

	// 헝가리안 표기법
	// int iYear;
	// float fHeight;
	// 
	int iYear;

	iYear = 3;

	Monster a;
	a.Attack = 10;
	a.Hp = 20;

	CMonster b;
	b.Attack = 10;
	b.Hp = 20;

	// 접근제어자가 기본적으로
	// 구조체는 public이고
	// 클래스는 private 입니다.

	// 최초의 설계자
	// 구조체를 뭐로생각하고
	// 클래스를 뭐로생각하기에
	// 기본 접근제어가 구조체는 public이고
	//                클래스는 private일까를 한번쯤은 고민해주는게 좋습니다.

	// 왜그러냐?
	// C언어는 절차지향 프로그래밍
	// C++언어는 객체지향 프로그래밍

	// 절차지향 프로그래밍 
	//   - 코드는 위에서부터 아래로 흐른다.
	//   - 객체라는 개념이 없습니다.

	// 객체지향 프로그래밍
	//   - 우리가 월드를 만드는거에요.
	//   - Monster, Player, Camera, GameRule 등을 객체를 만들어서
	//     객체들끼리 알아서 상호작용하는 코드를 짜는 방식을 객체지향 프로그래밍

	//     이상향입니다.
	//     그럴듯하게 요약하면
	//     [클래스를 많이써서 코드를 분할하자.]
	//     C언어는 너무 파일하나에 몰아져있다.
}